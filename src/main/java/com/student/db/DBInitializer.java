package com.student.db;

import org.mindrot.jbcrypt.BCrypt;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DBInitializer {

    public static void initialize() {
        try (Connection conn = DBConnection.getConnection();
             Statement stmt = conn.createStatement()) {

            // Таблица пользователей с автоинкрементом
            if (!tableExists(stmt, "users")) {
                String createUsers = "CREATE TABLE users (" +
                        "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "username VARCHAR(50) UNIQUE, " +
                        "passwordHash VARCHAR(100), " +
                        "role VARCHAR(20), " +
                        "activated BOOLEAN" +
                        ")";
                stmt.execute(createUsers);
            }

            // Таблица ресурсов
            if (!tableExists(stmt, "resources")) {
                String createResources = "CREATE TABLE resources (" +
                        "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "name VARCHAR(100) UNIQUE, " +
                        "type VARCHAR(50), " +
                        "owner VARCHAR(50)" +
                        ")";
                stmt.execute(createResources);
            }

            // Таблица прав доступа
            if (!tableExists(stmt, "permissions")) {
                String createPermissions = "CREATE TABLE permissions (" +
                        "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "resourceName VARCHAR(100), " +
                        "role VARCHAR(20), " +
                        "canRead BOOLEAN, " +
                        "canEdit BOOLEAN, " +
                        "canDelete BOOLEAN" +
                        ")";
                stmt.execute(createPermissions);
            }

            // Таблица логов
            if (!tableExists(stmt, "logs")) {
                String createLogs = "CREATE TABLE logs (" +
                        "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                        "message VARCHAR(1000)" +
                        ")";
                stmt.execute(createLogs);
            }

            // Таблица ролей (справочник)
            if (!tableExists(stmt, "roles")) {
                String createRoles = "CREATE TABLE roles (" +
                        "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "name VARCHAR(20) UNIQUE" +
                        ")";
                stmt.execute(createRoles);
            }

            // Вставка ролей, если отсутствуют
            String[] roles = {"ADMIN", "AUDITOR", "EMPLOYEE"};
            for (String role : roles) {
                String checkRole = "SELECT id FROM roles WHERE name = '" + role + "'";
                ResultSet rs = stmt.executeQuery(checkRole);
                if (!rs.next()) {
                    String insertRole = "INSERT INTO roles (name) VALUES ('" + role + "')";
                    stmt.executeUpdate(insertRole);
                }
                rs.close();
            }

            // Вставка стандартных пользователей (admin, audit, employee) если не существуют
            String checkAdmin = "SELECT id FROM users WHERE username='admin'";
            ResultSet rs = stmt.executeQuery(checkAdmin);
            if (!rs.next()) {
                String adminPass = BCrypt.hashpw("admin", BCrypt.gensalt());
                String insertAdmin = "INSERT INTO users (username, passwordHash, role, activated) VALUES " +
                        "('admin', '" + adminPass + "', 'ADMIN', TRUE)";
                stmt.executeUpdate(insertAdmin);
            }
            rs.close();

            String checkAudit = "SELECT id FROM users WHERE username='audit'";
            rs = stmt.executeQuery(checkAudit);
            if (!rs.next()) {
                String auditPass = BCrypt.hashpw("audit", BCrypt.gensalt());
                String insertAudit = "INSERT INTO users (username, passwordHash, role, activated) VALUES " +
                        "('audit', '" + auditPass + "', 'AUDITOR', TRUE)";
                stmt.executeUpdate(insertAudit);
            }
            rs.close();

            String checkEmployee = "SELECT id FROM users WHERE username='employee'";
            rs = stmt.executeQuery(checkEmployee);
            if (!rs.next()) {
                String empPass = BCrypt.hashpw("employee", BCrypt.gensalt());
                String insertEmp = "INSERT INTO users (username, passwordHash, role, activated) VALUES " +
                        "('employee', '" + empPass + "', 'EMPLOYEE', TRUE)";
                stmt.executeUpdate(insertEmp);
            }
            rs.close();

            System.out.println("Database initialized successfully in Firebird.");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private static boolean tableExists(Statement stmt, String tableName) throws SQLException {
        String check = "SELECT COUNT(*) FROM RDB$RELATIONS WHERE RDB$RELATION_NAME = '" + tableName.toUpperCase() + "'";
        ResultSet rs = stmt.executeQuery(check);
        rs.next();
        boolean exists = rs.getInt(1) > 0;
        rs.close();
        return exists;
    }
}
